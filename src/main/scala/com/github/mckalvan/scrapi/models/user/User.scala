package com.github.mckalvan.scrapi.models.user

import com.github.mckalvan.scrapi.models.mixins.GettableObj.Gettable
import com.github.mckalvan.scrapi.models.mixins.{Awardable, Awardings, Gildings, Listable, Repliable, Reportable, Votable}
import com.github.mckalvan.scrapi.scrapi.Params
import com.github.mckalvan.scrapi.utils.RedditConstants.USER

object User extends Gettable {
  def apply(name: String, params: (String, String)*): ParsedUser = {
    getSubmitted[ParsedUser]("user_about", params, Map(USER -> name))(extractD)
  }
}

final case class ParsedUser(is_employee: Boolean,
                 is_friend: Boolean,
                 subreddit: UserSubreddit,
                 snooavatar_size: Option[List[Int]],
                 awardee_karma: Int,
                 id: String,
                 verified: Boolean,
                 is_gold: Boolean,
                 is_mod: Boolean,
                 awarder_karma: Int,
                 has_verified_email: Boolean,
                 icon_img: String,
                 hide_from_robots: Boolean,
                 link_karma: Int,
                 pref_show_snoovatar: Boolean,
                 total_karma: Int,
                 accept_chats: Option[Boolean],
                 name: String,
                 created: Double,
                 created_utc: Double,
                 snoovatar_img: String,
                 comment_karma: Int,
                 has_subscribed: Boolean,
                 accept_pms: Option[Boolean]) extends Listable {

  // Get list of posts made by the user
  def getPosts(params: Params*): Seq[GenericSubmission] = paginateResponse[GenericSubmission]("user", params, Map(USER -> name))
}

final case class UserSubreddit(default_set: Boolean,
                         user_is_contributor: Boolean,
                         banner_img: String,
                         restrict_posting: Boolean,
                         user_is_banned: Boolean,
                         free_form_reports: Boolean,
                         community_icon: Option[String],
                         show_media: Boolean,
                         icon_color: String,
                         user_is_muted: Boolean,
                         display_name: String,
                         header_img: Option[String],
                         title: String,
                         previous_names: List[String],
                         over_18: Boolean,
                         icon_size: List[Int],
                         primary_color: String,
                         icon_img: String,
                         description: String,
                         submit_link_label: String,
                         header_size: Option[List[Int]],
                         restrict_commenting: Boolean,
                         subscribers: Int,
                         submit_text_label: String,
                         is_default_icon: Boolean,
                         link_flair_position: String,
                         display_name_prefixed: String,
                         key_color: String,
                         name: String,
                         is_default_banner: Boolean,
                         url: String,
                         quarantine: Boolean,
                         banner_size: List[Int],
                         user_is_moderator: Boolean,
                         public_description: String,
                         link_flair_enabled: Boolean,
                         disable_contributor_requests: Boolean,
                         subreddit_type: String,
                         user_is_subscriber: Boolean
                        )

final case class GenericSubmission(all_awardings: Awardings,
                       approved_at_utc: Option[Double],
                       approved_by: Option[String],
                       archived: Boolean,
                       associated_award: Option[String],
                       author: String,
                       author_flair_background_color: Option[String],
                       author_flair_css_class: Option[String],
                       author_flair_richtext: Option[String],
                       author_flair_template_id: Option[String],
                       author_flair_text: Option[String],
                       author_flair_text_color: Option[String],
                       author_flair_type: Option[String],
                       author_fullname: Option[String],
                       author_patreon_flair: Option[Boolean],
                       author_premium: Option[Boolean],
                       awarders: Option[String],
                       banned_at_utc: Option[Double],
                       banned_by: Option[String],
                       body: Option[String],
                       body_html: Option[String],
                       can_gild: Boolean,
                       can_mod_post: Boolean,
                       category: Option[String],
                       collapsed: Option[Boolean],
                       collapsed_because_crowd_control: Option[Boolean],
                       collapsed_reason: Option[String],
                       content_categories: Option[String],
                       controversiality: Option[Int],
                       created: Double,
                       created_utc: Double,
                       discussion_type: Option[String],
                       distinguished: Option[String],
                       downs: Int,
                       edited: Option[Boolean],
                       gilded: Int,
                       gildings: Gildings,
                       id: String,
                       is_submitter: Option[Boolean],
                       link_flair_css_class: Option[String],
                       link_flair_richtext: Option[String],
                       link_flair_text: Option[String],
                       link_flair_text_color: Option[String],
                       link_flair_type: Option[String],
                       link_id: Option[String],
                       link_permalink: Option[String],
                       link_title: Option[String],
                       link_url: Option[String],
                       locked: Boolean,
                       mod_note: Option[String],
                       mod_reason_by: Option[String],
                       mod_reason_title: Option[String],
                       mod_reports: Option[String],
                       name: String,
                       no_follow: Boolean,
                       num_comments: Int,
                       num_reports: Option[Int],
                       over_18: Boolean,
                       parent_id: Option[String],
                       permalink: String,
                       post_hint: Option[String],
                       quarantine: Boolean,
                       removal_reason: String,
                       removed_by: Option[String],
                       removed_by_category: Option[String],
                       report_reasons: String,
                       saved: Boolean,
                       score: Int,
                       score_hidden: Option[Boolean],
                       send_replies: Boolean,
                       steward_reports: List[String],
                       stickied: Boolean,
                       subreddit: String,
                       subreddit_id: String,
                       subreddit_name_prefixed: String,
                       subreddit_type: String,
                       suggested_sort: Option[String],
                       thumbnail: Option[String],
                       thumbnail_height: Option[Int],
                       thumbnail_width: Option[Int],
                       total_awards_received: Int,
                       ups: Int,
                       user_reports: List[String]) extends Gettable

// TODO: Show info about authorized user
object AuthenticatedUser extends Gettable{

}
